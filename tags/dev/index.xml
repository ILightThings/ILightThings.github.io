<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dev on iLightThings: A site</title><link>https://ilightthings.github.io/tags/dev/</link><description>Recent content in dev on iLightThings: A site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Aug 2022 17:15:50 -0400</lastBuildDate><atom:link href="https://ilightthings.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Building the Poke encoder in Metasploit</title><link>https://ilightthings.github.io/posts/encoder-in-metasploit/</link><pubDate>Thu, 25 Aug 2022 17:15:50 -0400</pubDate><guid>https://ilightthings.github.io/posts/encoder-in-metasploit/</guid><description>Building the Poke encoder in Metasploit So as mentioned in a previous post, I built a custom encoder that would hide my payload as a string of words could not be understood by a static analysis from Antivirus solutions.
Unfortunately for me, building the shell code was slightly annoying. The steps were:
Use msfvenom with the payload of choice, use output it to -f num
Delete the whitespace and the newline characters from the payload</description></item><item><title>Pokemon-Encoder</title><link>https://ilightthings.github.io/posts/pokemon-shellcode-encoder/</link><pubDate>Wed, 24 Aug 2022 07:39:32 -0400</pubDate><guid>https://ilightthings.github.io/posts/pokemon-shellcode-encoder/</guid><description>This is just a small writeup I made for a shellcode payload encoder that I made for the the OSEP exam.
Goals:
Make sure the entropy is at a level similar to English
If the same shellcode is ran through the encoder multiple times, the result will be different but the result is the same
No key is needed to decrypt the shellcode. Just an algo
This technique was sponsored by the Pokemon Save Game Checksum Method.</description></item></channel></rss>